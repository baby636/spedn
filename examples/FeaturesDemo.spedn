/* 
 * This contract's logic doesn't make any sense.
 * Its purpose is only to demonstrate the language syntax.
 * Like this multi-line comment.
 */

contract PointlesContract(PubKey aliceKey, int param2) {
  // Contract parameters are constants to be provided when creating a P2SH address or a redeem script.

  // Logic of the contract is divided into one ore more challenges that define ways of reclaiming the coin.
  challenge spend(Sig aliceSig, bool flag, [byte] data) {
    // Each challenge defines at least one argument which is to be provided by the redeemer in the scriptSig.

    // challenge can contain any number of statements which include:

    // verification wich expects an expression evaluating to bool.
    verify checkSig(aliceSig, aliceKey);
    verify param2 > 5;
    verify flag && !flag || flag;

    // binding of immutable variable
    int x = (param2 + 3) % 5;
    // or pair of variables in case of splitting
    ([byte] left, [byte] right) = data @ x;

    // if
    if (flag) verify left == 0x1234567890abcdef;
    //with optional else
    else {
      // that both can introduce new lexical scope with braces
      int y = x / 3;
      verify y === 8;
    }
    // (y is gone here)

    [byte] data2 = data & 0xff;
    verify bin2num(data2) > 17;
  }

  // Each challenge has an assigned number and the redeemer needs to push this number in scriptSig to select this branch.
  challenge cancel([byte] y) {
    // supported types
    bool a = true;                  // boolean
    int b = 1;                      // 32-bit signed integers
    int c = 0x01i;                  // Which you can also express in hex (notice 'i' postfix)
    [byte;2] d = 0x00ff;            // array of binary data of any kind
    [byte;2] dd = "xd";             // array of binary data provided as a UTF-8 string
    PubKey e = PubKey(d);           // Public key, subtype of bin
    Sig f = Sig(d);                 // Signature, subtype of bin
    Ripemd160 g = ripemd160(d);     // RIPEMD-160 hash, like in public key hash, subtype of bin
    Sha1 h = sha1(d);               // SHA-1 hash, subtype of bin
    Sha256 i = sha256(e);           // SHA-256 hash, subtype of bin
    Time j = `2018-10-13 21:37:00`; // Absolute time
    Time k = TimeStamp(678);        // Absolute time provided as a block height
    Time l = TimeStamp(1539466620); // Absolute time provided as a Unix timestamp

    // you can implicitly cast subtypes to parent type
    [byte] m = i;
    // but otherwise you need an explicit type cast, like above for variables e and f
    
    // concatenation also upcasts to bin
    [byte] cat = e . f . g .h . i;
    
    verify a;
  }
}
